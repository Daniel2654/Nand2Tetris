// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str, tenPowArr;
    field int length, capacity;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */



    constructor String new(int maxLength)
    {
        let str = Array.new(maxLength);
        let tenPowArr = Array.new(5);
        let tenPowArr[0] = 1;
        let tenPowArr[1] = 10;
        let tenPowArr[2] = 100;
        let tenPowArr[3] = 1000;
        let tenPowArr[4] = 10000;


        let capacity = maxLength;
        let length = 0;
        return this;

    }

    /** Disposes this string. */
    method void dispose()
    {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length()
    {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j)
    {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c)
    {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c)
    {
        if (length < capacity)
        {
            let str[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar()
    {
        if (length > 0) // there is no need to actually erase the last char just decrease the length pointer
        {
            let length = length - 1;
        }
        return;

    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue()
    {
        var int cur, i, neg, val;
        let val = 0;
        if ((length > 0) & (str[0] = 45))
        {

            let neg = 1;
            let i = 1;
        }
        else
        {

            let i = 0;
            let neg = 0;
        }

        while ((i < length) & (str[i] > 47 & str[i] < 58))
        {
            let val = (val * 10) + (str[i] -  48);
            let i = i + 1;
        }

        if (neg = 1)
        {
            let val = val * - 1;
        }

        return val;



    }

    method int getIntLength(int val)
    {

        if (val < 10)
        {
            return 1;
        }
        if (val < 100)
        {
            return 2;
        }
        if (val < 1000)
        {
            return 3;
        }
        if (val < 10000)
        {
            return 4;
        }
        if (val > 9999)
        {
            return 5;
        }
        return 0; // must return
    }

    // note this is not the algorithem that described in the lecture but it's more efficent
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val)
    {
        var int lenInt, tenPow, mostLeftDigit;
        let length = 0;
        if (val < 0)
        {
            let val = -val;
            do appendChar(45);
        }


        let lenInt = getIntLength(val);

        while (lenInt > 0)
        {
            let tenPow = tenPowArr[lenInt - 1];
            let mostLeftDigit = val / tenPow;
            do appendChar(mostLeftDigit + 48);
            let val = val - (mostLeftDigit * tenPow);
            let lenInt = lenInt - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine()
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace()
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote()
    {
        return 34;
    }
}
