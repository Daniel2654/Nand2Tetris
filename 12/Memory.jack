// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array heap;
    static Array freeList;
    static Array listTail;
    static Array ram;


    /** Initializes the class. */
    function void init()
    {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let listTail = 2048;
        let heap[0] = 0; // next
        let heap[1] = 14335; // length

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address)
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value)
    {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size)
    {
            var Array cur;
            var Array newNode;
            var Array allocation;
            let cur = freeList;

            while (cur > 0)
            {
                if (cur[1] > (size + 2)) // if segment.size >= size + 2
                {
                    let allocation = cur + cur[1] - size;

                    let allocation[0] = 0; // allocation.next = null
                    let allocation[1] = size;

                    let cur[1] = cur[1] - size;

                    return allocation;

                }
                else
                {
                    let cur = cur[0];
                }


            }

            return 0; // alloc failed
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array deallocArray)
    {
        let listTail[0] = deallocArray;
        let listTail = deallocArray;
        return;
    }    
}
